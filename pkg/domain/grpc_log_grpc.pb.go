// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: pkg/domain/grpc_log.proto

package grpc_log

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GrpcLogServiceClient is the client API for GrpcLogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcLogServiceClient interface {
	Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*Response, error)
}

type grpcLogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcLogServiceClient(cc grpc.ClientConnInterface) GrpcLogServiceClient {
	return &grpcLogServiceClient{cc}
}

func (c *grpcLogServiceClient) Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc_log.GrpcLogService/Log", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcLogServiceServer is the server API for GrpcLogService service.
// All implementations must embed UnimplementedGrpcLogServiceServer
// for forward compatibility
type GrpcLogServiceServer interface {
	Log(context.Context, *LogRequest) (*Response, error)
	mustEmbedUnimplementedGrpcLogServiceServer()
}

// UnimplementedGrpcLogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcLogServiceServer struct {
}

func (UnimplementedGrpcLogServiceServer) Log(context.Context, *LogRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Log not implemented")
}
func (UnimplementedGrpcLogServiceServer) mustEmbedUnimplementedGrpcLogServiceServer() {}

// UnsafeGrpcLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcLogServiceServer will
// result in compilation errors.
type UnsafeGrpcLogServiceServer interface {
	mustEmbedUnimplementedGrpcLogServiceServer()
}

func RegisterGrpcLogServiceServer(s grpc.ServiceRegistrar, srv GrpcLogServiceServer) {
	s.RegisterService(&GrpcLogService_ServiceDesc, srv)
}

func _GrpcLogService_Log_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcLogServiceServer).Log(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_log.GrpcLogService/Log",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcLogServiceServer).Log(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GrpcLogService_ServiceDesc is the grpc.ServiceDesc for GrpcLogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcLogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_log.GrpcLogService",
	HandlerType: (*GrpcLogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Log",
			Handler:    _GrpcLogService_Log_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/domain/grpc_log.proto",
}
